DROP FUNCTION IF EXISTS SHOW_SUPPLIERS();

CREATE OR REPLACE FUNCTION SHOW_SUPPLIERS()
  RETURNS TABLE(supplierName VARCHAR(40), coffeeName VARCHAR(32)) AS $a$
BEGIN
  RETURN QUERY
  SELECT
    SUPPLIERS.SUP_NAME AS supplierName,
    COFFEES.COF_NAME   AS coffeeName
  FROM SUPPLIERS, COFFEES
  WHERE SUPPLIERS.SUP_ID = COFFEES.SUP_ID
  ORDER BY SUP_NAME;
END;
$a$ LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS GET_SUPPLIER_OF_COFFEE( VARCHAR(32) );

CREATE OR REPLACE FUNCTION GET_SUPPLIER_OF_COFFEE(coffeeName VARCHAR(32))
  RETURNS SETOF VARCHAR(40) AS $b$
BEGIN
    RETURN QUERY
    SELECT SUPPLIERS.SUP_NAME as supplierName
    FROM SUPPLIERS, COFFEES
    WHERE SUPPLIERS.SUP_ID = COFFEES.SUP_ID
    AND coffeeName = COFFEES.COF_NAME;
END;
$b$ LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS RAISE_PRICE( VARCHAR(32), FLOAT, NUMERIC(10, 2) );

CREATE OR REPLACE FUNCTION RAISE_PRICE(coffeeName VARCHAR(32), maximumPercentage REAL, newPrice NUMERIC(10, 2))
  RETURNS NUMERIC(10, 2) AS $c$
DECLARE
  maximumNewPrice NUMERIC(10, 2);
  oldPrice        NUMERIC(10, 2);
BEGIN
  --main: BEGIN
  SELECT COFFEES.PRICE
  INTO oldPrice
  FROM COFFEES
  WHERE COFFEES.COF_NAME = coffeeName;
  maximumNewPrice := oldPrice * (1 + maximumPercentage);
  IF (newPrice > maximumNewPrice)
  THEN newPrice := maximumNewPrice;
  END IF;
  IF (newPrice <= oldPrice)
  THEN newPrice := oldPrice;
  ELSE
    UPDATE COFFEES
    SET PRICE = newPrice
    WHERE COF_NAME = coffeeName;
  END IF;
  RETURN newPrice;
END;
$c$ LANGUAGE plpgsql;